<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 声明一个bean，这里只是单纯声明，并没有进行赋值 -->
    <bean id="user" class="sun.ioc.bo.UserBO" />
    <!-- 此处也没有引用UserBO，只是单纯用于创建一个UserService类 -->
    <bean id="userService" class="sun.ioc.service.UserService" />

    <!-- 声明另一个bean，并给自己的属性赋值，属性不包括‘自定义引用类型’ -->
    <bean id="beanProperty" class="sun.ioc.bo.UserBO">

    </bean>

    <!-- 【重要】声明另一个bean，并给自己的属性赋值，属性包含各种类型 -->
    <!-- 整形 setter方式注入-->
    <bean id="intIntUnPackage" class="sun.ioc.bean.IntegerBean">
        <!-- Integer -->
        <property name="age" value="18"/>
        <!-- int -->
        <property name="id" value="1"/>
        <!-- long -->
        <property name="length" value="12132"/>
        <property name="aShort" value="1">
            <description>asasasasas</description>
        </property>
    </bean>

    <!-- 整形 构造方法方式注入-->
    <bean id="intIntPackageConstructor" class="sun.ioc.bean.IntegerConstructorBean">
        <constructor-arg name="id" value="2"/>
        <constructor-arg name="age" value="19"/>
        <constructor-arg name="time" value="123456788"/>
        <constructor-arg name="length" value="123456789"/>
        <constructor-arg name="aShort" value="12345"/>
        <!-- 构造函数属性的索引位置 -->
        <constructor-arg index="5" value="12346"/>
    </bean>

    <bean id="string" class="sun.ioc.bean.StringBean">
        <property name="string">
            <idref bean="intIntPackageConstructor"/>
        </property>
    </bean>

    <!-- 浮点型 begin -->
    <bean id="aFloat" class="sun.ioc.bean.FloatBean">
        <property name="AFloat" value="1.1"/>
        <property name="AFloatF" value="1.1"/>
        <property name="ADouble" value="1.1"/>
        <property name="ADoubleD" value="1.1"/>
    </bean>

    <bean id="floatConstructorBean" class="sun.ioc.bean.FloatConstructorBean">
        <constructor-arg index="0" value="1.2"/>
        <constructor-arg index="1" value="1.2"/>
        <constructor-arg index="2" value="1.2"/>
        <constructor-arg index="3" value="1.2"/>
<!--        <constructor-arg index="4" value="0"/>-->
        <constructor-arg index="4" value="false"/>
    </bean>
    <!-- 浮点型 end -->

    <!-- 字符型 begin [重要] -->
    <!-- 方式1 -->
    <bean id="stringBean" class="sun.ioc.bean.StringBean">
        <property name="string">
            <idref bean="intIntPackageConstructor"/>
        </property>
        <property name="stringBuffer" value="直接使用字符串赋值stringBuffer可以吗，运行完发现是可以的"/>
        <property name="stringBuilder" value="直接使用字符串赋值stringBuilder可以吗，运行完发现是可以的"/>
        <property name="aChar" value="a"/>
        <property name="character" value="a"/>
    </bean>
    <!-- 方式2 -->
    <bean id="stringBuffer" class="java.lang.StringBuffer">
        <constructor-arg name="str" value="使用StringBuffer的构造函数初始化"/>
    </bean>
    <bean id="stringBean1" class="sun.ioc.bean.StringBean">
        <property name="string">
            <idref bean="intIntPackageConstructor"/>
        </property>
        <property name="stringBuffer" ref="stringBuffer"/>
        <property name="stringBuilder" value="直接使用字符串赋值stringBuilder可以吗，运行完发现是可以的"/>
        <!-- char类型是直接可以赋值的 -->
        <property name="aChar" value="a"/>
        <property name="character" value="了"/>
        <!-- byte类型赋值在0-127之间 -->
        <property name="aByte" value="0"/>
        <property name="aByteB" value="127"/>
    </bean>

    <bean id="stringBean2" class="sun.ioc.bean.StringConstructorBean">
        <constructor-arg index="0" value="0"/>
        <constructor-arg index="1" value="1"/>
        <constructor-arg index="2" value="2"/>
        <constructor-arg index="3" value="a"/>
        <constructor-arg index="4" value="b"/>
    </bean>
    <!-- 字符型 end -->
</beans>